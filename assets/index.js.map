{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../vite/dynamic-import-polyfill","../../src/Emoji.tsx","../../src/EmojiPicker/Navbar.tsx","../../src/EmojiPicker/Footer.tsx","../../src/EmojiPicker/Scroll.tsx","../../src/EmojiPicker.tsx","../../website/index.tsx"],"sourcesContent":["export interface EmojiObject {\n  unicode: string;\n  name: string;\n  keywords?: string[];\n}\n\n/**\n * Converts from unified to native representation of an emoji.\n * @param unified unified representation\n */\nexport function unifiedToNative(unified: string) {\n  const codePoints = unified.split('-').map(u => parseInt(u, 16));\n  return String.fromCodePoint.apply(String, codePoints);\n}\n\n/**\n * Measures the pixel width of a scrollbar.\n * source: https://github.com/sonicdoe/measure-scrollbar.\n */\nexport function measureScrollbar(): number {\n  if (typeof document == 'undefined') return 0;\n  const div = document.createElement('div');\n  div.style.cssText = \"width:100px; height:100px; overflow:scroll; position:absolute; top:-9999px\";\n  document.body.appendChild(div);\n  const scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n}\n\n/**\n * Calculates the number of rows when key and array are flattened, along\n * with an array of ranges to map an index back to key.\n * @param data key array mapping\n * @param perRow number of elements to chunk array into\n */\nexport type itemRange = { key: string; from: number; to: number; length: number }\nexport function calcCountAndRange(data: Record<string, any[]>, perRow: number) {\n  let itemCount = 0, itemRanges: itemRange[] = [];\n  Object.entries(data).forEach(([key, array]) => {\n    if (array.length === 0) return;\n    let from = itemCount, to = itemCount + 1 + Math.ceil(array.length / perRow);\n    itemRanges.push({key, from, to, length: array.length});\n    itemCount = to;\n  })\n  return {itemCount, itemRanges};\n}\n\n// Returns true if objects shallowly differ.\nexport function shallowDiffer(prev: Object, next: Object): boolean {\n  for (let attribute in prev) { if (!(attribute in next)) { return true; }}\n  for (let attribute in next) { if (prev[attribute] !== next[attribute]) { return true; }}\n  return false;\n}\n\n// Trailing throttle function.\nexport function throttleIdleTask(callback: Function) {\n  // @ts-ignore\n  const idleHandler = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  let running = false, argsFunc: any;\n  return function throttled(...args: any[]) {\n    argsFunc = args;\n    if (running) { return; }\n    running = true;\n    idleHandler(() => {\n      running = false; \n      callback.apply(null, argsFunc);\n    })\n  }\n}","const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"/EmojiPicker/assets/\");","import React, { FunctionComponent } from 'react';\nimport { EmojiObject, unifiedToNative } from './utils'\nimport twemoji from \"./twemoji.svg\"\n\ntype EmojiProps = { \n  emoji: EmojiObject; \n  className?: string;\n  [key: string]: any; \n}\n\nconst Emoji: FunctionComponent<EmojiProps> = ({emoji, className, ...props}) => {\n  className = className ? `emoji-picker-emoji ${className}` : `emoji-picker-emoji`\n  return (\n    <span className={className} data-unicode={emoji.unicode} {...props}>\n      <img \n        className=\"emoji-picker-emoji-img\" \n        alt={unifiedToNative(emoji.unicode)} \n        src={`${twemoji}#${emoji.unicode}`} \n        draggable=\"false\"\n        aria-label={emoji.name} \n      />\n    </span>\n  )\n}\n\nexport { EmojiProps, Emoji };\nexport default Emoji;\n","import React, { FunctionComponent, useState, KeyboardEvent, MouseEvent, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nconst Navbar: FunctionComponent<{data: Record<string, EmojiObject[]>, handleSelectInNavbar: Function, [key: string]: any}> = ({data, handleSelectInNavbar, ...props}) => {\n  \n  // roving tabindex\n  const [index, setIndex] = useState(0);\n  \n  const onNavbarKeyDown = (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'Enter': \n        return handleSelectInNavbar(Object.keys(data)[index]);\n      case 'ArrowLeft':\n        return index > 0 && setIndex(index => index - 1);\n      case 'ArrowRight':\n        return index < Object.keys(data).length - 1 && setIndex(index => index + 1)\n      case 'Home':\n        return index > 0 && setIndex(0);\n      case 'End':\n        return index < Object.keys(data).length - 1 && setIndex(Object.keys(data).length - 1)\n    }\n  }\n\n  const onNavbarClick = (index: number, category: string) => (event: MouseEvent) => {\n    setIndex(index);\n    handleSelectInNavbar(category);\n  }\n\n  return (\n    <div className=\"emoji-picker-navbar\" {...props} role=\"tablist\" aria-label=\"emoji categories\">\n      { Object.entries(data).map(([category, list], i) => {\n          const props = {\n            className: \"emoji-picker-navbar-category\",\n            key: `navbar-${category}`,\n            onClick: onNavbarClick(i, category),\n            onKeyDown: onNavbarKeyDown,\n            role: \"tab\",\n            \"aria-label\": category,\n            \"aria-selected\": false,\n            tabIndex: -1,\n            ...i == index && {\n              \"aria-selected\": true,\n              tabIndex: 0,\n              ref: (button: HTMLButtonElement) => Boolean(document.activeElement?.closest(\".emoji-picker-navbar\")) && button?.focus(),\n            }\n          }\n          return (\n            <button {...props}>\n              { <Emoji emoji={list[0]}/> }\n            </button>\n          )\n        }\n      )}\n    </div>  \n  )\n}\n\nconst MemoizedNavbar = memo(Navbar)\nexport default MemoizedNavbar;","import React, { FunctionComponent, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nconst Footer: FunctionComponent<{emoji: EmojiObject | undefined, emojiPreviewName, [key: string]: any}> = ({emoji, emojiPreviewName, ...props}) => {\n  return (\n    <div className=\"emoji-picker-footer\" {...props}>\n      { <Emoji emoji={emoji || {name: \"wave\", unicode: \"1f44b\"}}/> }\n      <div className=\"emoji-picker-name\">\n        { emoji ? emojiPreviewName(emoji) : <span style={{'fontSize': '1.25em'}}>Emoji Picker</span> }\n      </div>\n    </div>     \n  )\n}\n\nconst MemoizedFooter = memo(Footer)\nexport default MemoizedFooter;","import React, { FunctionComponent, useEffect, useRef, Ref, useState, memo, forwardRef, MutableRefObject, CSSProperties, MouseEvent } from \"react\";\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { EmojiObject, shallowDiffer, itemRange } from '../utils'\nimport Emoji from \"../Emoji\";\n\ntype ScrollProps = {\n  emojisPerRow: number, \n  emojiSize: number,\n  numberScrollRows: number,\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null,\n  emojiData: Record<string, EmojiObject[]>;\n  refVirtualList: MutableRefObject<VirtualList>,\n  handleClickInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  handleMouseInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  itemCount: number,\n  itemRanges: itemRange[],\n  collapseHeightOnSearch: boolean,\n}\n\nconst Scroll: FunctionComponent<ScrollProps> = ({emojisPerRow, emojiSize, numberScrollRows, focusedEmoji, emojiData, refVirtualList, handleClickInScroll, handleMouseInScroll, itemCount, itemRanges, collapseHeightOnSearch}) => {\n  \n  const [arrayOfRows, setArrayOfRows] = useState<Record<number, JSX.Element>>({});\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n\n  // Keep track of previously focused emoji to avoid re-rendering all rows.\n  const prevFocusedEmoji = useRef<{emoji: EmojiObject, row: number} | null>(null);\n\n  // Reset arrayOfRows upon change in data or emojisPerRow.\n  useEffect(function resetScrollState() { \n    setArrayOfRows({}); \n    infiniteLoaderRef?.current.resetloadMoreItemsCache();\n    prevFocusedEmoji.current = focusedEmoji; // focusedEmoji included in emojiData change render\n    refVirtualList?.current.scrollToItem(0);\n    loadMoreItems(0, Math.min(numberScrollRows + 10 - 1, itemRanges[itemRanges.length - 1].to));  // minimumBatchSize + threshold - 1\n  }, [emojiData, emojisPerRow]);\n\n  // Recompute the rows of the next and previous focusedEmoji upon change in focusedEmoji.\n  useEffect(function resetRowsWithFocusedEmoji() {\n    let prevEmoji = prevFocusedEmoji.current, nextEmoji = focusedEmoji;\n    if (prevEmoji == nextEmoji) { return; }\n    let rowsToUpdate = new Set([prevEmoji?.row, nextEmoji?.row]);\n    Array.from(rowsToUpdate).forEach(row => row && loadMoreItems(row, row));\n    prevFocusedEmoji.current = nextEmoji;\n    nextEmoji?.row && refVirtualList.current?.scrollToItem(nextEmoji.row);\n  }, [focusedEmoji]);\n\n  const isItemLoaded  = (index: number): boolean => !!arrayOfRows[index];\n\n  const loadMoreItems = (startIndex: number, endIndex: number) => {\n    const nextArrayOfRows = {}\n    let i = startIndex, range: itemRange | undefined;\n    while (i <= endIndex) {\n\n      range = itemRanges.find(range => range.from <= i && i < range.to);\n      if (range === undefined) break;\n\n      for (let rowIndex = i; rowIndex < Math.min(range.to, endIndex + 1); rowIndex++) {\n        if (rowIndex == range.from) {\n          nextArrayOfRows[rowIndex] = <div className=\"emoji-picker-category-title\" aria-rowindex={rowIndex + 1} aria-colindex={1}>{range.key}</div>\n        } else {\n\n          const offset = rowIndex - range.from;\n          const row = emojiData[range.key].slice((offset - 1) * emojisPerRow, offset * emojisPerRow)\n\n          nextArrayOfRows[rowIndex] = (\n            <ul className=\"emoji-picker-category-emoji\" role=\"row\" aria-rowindex={rowIndex + 1}>\n              { row.map((emoji: EmojiObject, colIndex: number) => {\n                  const liProps = {\n                    key: emoji.unicode, \n                    onClick: handleClickInScroll(emoji, rowIndex), \n                    onMouseMove: handleMouseInScroll(emoji, rowIndex), \n                    role: \"gridcell\", \n                    \"aria-rowindex\": rowIndex + 1,\n                    \"aria-colindex\": colIndex + 1,\n                    tabIndex: -1,\n                    ...emoji === focusedEmoji?.emoji && {\n                      tabIndex: 0,\n                      ref: (li: HTMLLIElement) => focusedEmoji.focusOnRender && li?.focus({preventScroll: focusedEmoji.preventScroll}),\n                    }\n                  }\n                  const emojiProps = {\n                    emoji,\n                    ...emoji === focusedEmoji?.emoji && {\n                      className: \"emoji-picker-emoji-focused\",\n                    }\n                  }\n                  return (\n                    <li {...liProps}>\n                      <Emoji {...emojiProps}/>\n                    </li>\n                  )\n                }) \n              }\n            </ul>\n          )\n        }\n      }\n      i = range.to;\n    }\n    setArrayOfRows(prev => Object.assign({}, prev, nextArrayOfRows));\n  }\n\n  return (\n    <InfiniteLoader \n      ref={infiniteLoaderRef}\n      itemCount={itemCount}\n      loadMoreItems={loadMoreItems}\n      isItemLoaded={isItemLoaded}\n      minimumBatchSize={numberScrollRows}\n      threshold={10}\n    >\n      {({onItemsRendered, ref}) => (\n        <VirtualList \n          onItemsRendered={onItemsRendered} \n          ref={list => {ref(list); refVirtualList && (refVirtualList.current = list);}}\n          itemCount={itemCount} \n          itemData={arrayOfRows}\n          itemSize={emojiSize} \n          height={collapseHeightOnSearch ? Math.min(itemCount * emojiSize + 9, numberScrollRows * emojiSize) : numberScrollRows * emojiSize}\n          innerElementType={innerElementType}\n        >\n          {MemoizedRow}\n        </VirtualList>\n      )}\n    </InfiniteLoader>\n  )\n}\n\nconst MemoizedScroll = memo(Scroll, function ScrollPropsAreEqual(prevProps, nextProps) {\n  return prevProps.focusedEmoji?.emoji == nextProps.focusedEmoji?.emoji\n      && prevProps.emojiData == nextProps.emojiData\n      && prevProps.collapseHeightOnSearch == nextProps.collapseHeightOnSearch\n      && prevProps.emojiSize == nextProps.emojiSize\n      && prevProps.emojisPerRow == nextProps.emojisPerRow;\n});\n\nexport default MemoizedScroll;\n\nconst VirtualRow: FunctionComponent<{index: number, style: CSSProperties, data}> = ({index, style, data}) => {\n  return (\n    <div className=\"emoji-picker-virtual-row\" style={style}>\n      {data[index]}\n    </div>\n  )\n}\n\n/**\n * memoize rows of the virtualList, only re-rendering when changing in data[index]\n */\nconst MemoizedRow = memo(VirtualRow, function compareRowProps(prevProps, nextProps) {\n  const { style: prevStyle, data: prevData, index: prevIndex, ...prevRest } = prevProps;\n  const { style: nextStyle, data: nextData, index: nextIndex, ...nextRest } = nextProps;\n  return prevData[prevIndex] === nextData[nextIndex] && !shallowDiffer(prevStyle, nextStyle) && !shallowDiffer(prevRest, nextRest)\n});\n\n\n/**\n * adds padding to the bottom of virtual list\n * See: https://github.com/bvaughn/react-window#can-i-add-padding-to-the-top-and-bottom-of-a-list\n */\nconst LIST_PADDING_SIZE = 9;\nconst innerElementType = forwardRef(({style, ...props }: {style: CSSProperties}, ref: Ref<VirtualList>) => (\n  // @ts-ignore\n  <div ref={ref} style={{...style, height: `${parseFloat(style.height) + LIST_PADDING_SIZE}px`}} \n    {...props}\n  />\n));","import React, { forwardRef, useCallback, useState, useImperativeHandle, useMemo, useLayoutEffect, useRef, Ref, useReducer, KeyboardEvent, MouseEvent, useEffect } from \"react\"\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport { EmojiObject, measureScrollbar, calcCountAndRange, itemRange } from './utils'\n\nimport Navbar from \"./EmojiPicker/Navbar\";\nimport Footer from \"./EmojiPicker/Footer\";\nimport Scroll from \"./EmojiPicker/Scroll\";\n\ntype EmojiPickerProps = {\n  emojiData: Record<string, EmojiObject[]>;\n  emojiSize?: number;\n  onEmojiSelect?: (emoji: EmojiObject, event: KeyboardEvent | MouseEvent) => void;\n  showNavbar?: boolean;\n  showFooter?: boolean;\n  showScroll?: boolean;\n  emojisPerRow?: number;\n  numberScrollRows?: number;\n  onKeyDownScroll?: Function;\n  collapseCategoriesOnSearch?: boolean;\n  collapseHeightOnSearch?: boolean;\n  theme?: \"system\" | \"light\" | \"dark\";\n  emojiPreviewName?: (emoji: EmojiObject) => string;\n}\n\n// Define public methods accessible via ref.\n\nexport interface EmojiPickerRef {\n  search: (query: string) => void;\n  emojis: Record<string, EmojiObject[]>;\n  focusedEmoji: EmojiObject | null;\n  handleKeyDownScroll: (event: KeyboardEvent<HTMLElement>) => void;\n}\n\ntype PickerState = {\n  searchEmojis: {emojis: Record<string, EmojiObject[]> | null, query: string},\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null\n}\n\n\n// Use state reducer to avoid separate re-renders to changes to searchEmojis and focusedEmoji.\nfunction EmojiPickerReducer({emojiData}) {\n  return (prevState: PickerState, nextState: any): PickerState => {\n    // reset focusedEmoji to first emoji on searchEmojis change\n    if (nextState.searchEmojis && prevState.searchEmojis != nextState.searchEmojis) {\n      let emojis = (nextState.searchEmojis?.query && nextState.searchEmojis?.emojis) || emojiData, \n        category = emojis[Object.keys(emojis)[0]];\n      let emoji = category[0];\n      nextState.focusedEmoji = {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n    }\n    return {...prevState, ...nextState};\n  }\n}\n\nfunction EmojiPickerRefComponent({emojiData = {}, emojiSize = 36, numberScrollRows = 12, onEmojiSelect = (emoji: EmojiObject) => console.log(emoji), showNavbar = false, showFooter = false, showScroll = true, emojisPerRow = 9, onKeyDownScroll = (event) => null, collapseCategoriesOnSearch = true, collapseHeightOnSearch = true, theme = \"system\", emojiPreviewName = (emoji: EmojiObject) => emoji.name}: EmojiPickerProps, ref: Ref<EmojiPickerRef>) {\n\n  const pickerStateReducer = useCallback(EmojiPickerReducer({emojiData}), [emojiData])\n  const [ pickerState, setPickerState ] = useReducer(pickerStateReducer, {\n    searchEmojis: {emojis: null, query: \"\"},\n    focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n  })\n\n  const { itemCount, itemRanges } = useMemo(() => calcCountAndRange(pickerState.searchEmojis.emojis || emojiData, emojisPerRow), [pickerState.searchEmojis, emojisPerRow]);\n\n  /**\n   * TODO: Replace in-memory search with indexeddb index.\n   * See as an example: https://github.com/nolanlawson/emoji-picker-element\n   */\n  const search = (query: string): void => {\n    const {searchEmojis} = pickerState;\n\n    // reset pickerState when query is empty string\n    if (!query)\n      return setPickerState({\n        searchEmojis: {emojis: null, query: \"\"},\n        focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n      });\n\n    // assumption: increasing query length if prevSearchEmojis is empty will not change searchEmojis\n    if (searchEmojis?.emojis && !Object.values(searchEmojis.emojis).flat().length && searchEmojis.query.length < query.length)\n      return setPickerState({searchEmojis: {emojis: searchEmojis.emojis, query}});\n\n    // use prevSearchEmojis if query length has increased, else use full set\n    const index = query.length > searchEmojis.query.length && searchEmojis.emojis != null\n      ? Object.values(searchEmojis.emojis).flat()\n      : Object.values(emojiData).flat();\n\n    // simple weighted search to filter emojiObjects\n    let results = index\n      .map(emoji => ({emoji, score: (emoji.keywords || []).map(word => word.indexOf(query) != -1).reduce((a, b) => a + Number(b), Number(emoji.name.indexOf(query) != -1) * 3)}))\n      .filter(a => a.score)\n      .sort((a, b) => b.score - a.score)\n      .map(({emoji}) => emoji);\n\n    if (collapseCategoriesOnSearch) {\n      return setPickerState({searchEmojis: {emojis: {\"Search Results\": results}, query}});\n    } else {\n      let grouped = Object.entries(emojiData).map(([category, list]) => ([category, list.filter(emoji => results.includes(emoji))])).reduce((sum, [category, list]) => Object.assign(sum, {[category as string]: list}), {});\n      return setPickerState({searchEmojis: {emojis: grouped, query}});\n    }\n  }\n\n  const refVirtualList = useRef<VirtualList>(null);\n  const refScroll = useRef<HTMLDivElement>(null);\n\n  // Define event handlers in scroll element.\n\n  const handleClickInScroll = (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n    event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n    onEmojiSelect(emoji, event);\n    setPickerState({focusedEmoji: {row, emoji, focusOnRender: true, preventScroll: true}})\n  }\n  \n  const handleMouseInScroll = (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n    if (emoji == pickerState.focusedEmoji?.emoji || event.movementX == 0 && event.movementY == 0) return;\n    event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n    // @ts-ignore\n    const isSafari = window.safari !== undefined; // safari does not support preventScroll focus\n    setPickerState({focusedEmoji: {row, emoji, focusOnRender: !isSafari, preventScroll: true}})\n    isSafari && refScroll.current && refScroll.current.focus();\n  }\n\n  const handleKeyDownScroll = (event: KeyboardEvent<HTMLElement>) => {\n    const {searchEmojis, focusedEmoji} = pickerState;\n    const emojis = Object.values(searchEmojis.emojis || emojiData).filter(array => array.length !== 0);\n    switch (event.key) {\n      case \"Enter\": {\n        event.preventDefault();\n        if (!focusedEmoji) {\n          let emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          emoji && setPickerState({focusedEmoji: {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        } else {\n          focusedEmoji.emoji && onEmojiSelect(focusedEmoji.emoji, event);\n        }\n        return;\n      }\n      case 'Home': {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        let emojis = searchEmojis.emojis || emojiData, \n          category = emojis[Object.keys(emojis)[0]];\n        emoji = category[0]\n        row = 1;\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case 'End': {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        let emojis = searchEmojis.emojis || emojiData, \n          category = emojis[Object.keys(emojis).pop() as string];\n        emoji = category[category.length - 1]\n        row = itemRanges[itemRanges.length - 1]?.to - 1;\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}});\n      }\n      case \"ArrowUp\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0];\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex - emojisPerRow >= 0) { // not first row\n              emoji = arrayEmoji[emojiIndex - emojisPerRow]; \n              row = focusedEmoji.row - 1;\n            } else if (arrayIndex !== 0) {\n              const arrayAbove = emojis[arrayIndex - 1];\n              const index = (emojiIndex > (arrayAbove.length - 1) % emojisPerRow) ? arrayAbove.length - 1 : Math.floor((arrayAbove.length - 1 - emojiIndex) / emojisPerRow) * emojisPerRow + emojiIndex;\n              emoji = arrayAbove[index]; // go directly up if possible; else last element\n              row = focusedEmoji.row - 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowDown\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex + emojisPerRow < arrayEmoji.length) { // not last row\n              emoji = arrayEmoji[emojiIndex + emojisPerRow]; \n              row = focusedEmoji.row + 1;            \n            } else if (emojiIndex + emojisPerRow < Math.ceil(arrayEmoji.length / emojisPerRow) * emojisPerRow) {\n              emoji = arrayEmoji[arrayEmoji.length - 1];\n              row = focusedEmoji.row + 1;\n            } else if (arrayIndex !== emojis.length - 1) {\n              const arrayBelow = emojis[arrayIndex + 1], modIndex = emojiIndex % emojisPerRow;\n              emoji = arrayBelow[modIndex] || arrayBelow[arrayBelow.length - 1] // go directly down if possible\n              row = focusedEmoji.row + 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowLeft\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            if (emojiIndex - 1 >= 0) { \n              emoji = arrayEmoji[emojiIndex - 1];\n              row = Math.floor(emojiIndex/emojisPerRow) == Math.floor((emojiIndex - 1)/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row - 1;\n            } else if (arrayIndex !== 0) { // category above this one if it exists\n              const arrayAbove = emojis[arrayIndex - 1];\n              emoji = arrayAbove[arrayAbove.length - 1];\n              row = focusedEmoji.row - 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      case \"ArrowRight\": {\n        event.preventDefault();\n        let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n        if (!focusedEmoji) {\n          emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n          row = 1;\n        } else {\n          let arrayIndex, arrayEmoji, emojiIndex;\n          emojis.find((array, index) => { \n            emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n            return emojiIndex !== -1;\n          })\n          if (emojiIndex != undefined) {\n            let newIndex = emojiIndex + 1;\n            if (newIndex < arrayEmoji.length) { \n              emoji = arrayEmoji[newIndex] \n              row = Math.floor(emojiIndex/emojisPerRow) == Math.floor(newIndex/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row + 1;\n            } else if (arrayIndex !== emojis.length - 1) {\n              let arrayBelow = emojis[arrayIndex + 1];\n              emoji = arrayBelow[0];\n              row = focusedEmoji.row + 2; // skip category title row\n            }\n          }\n        }\n        return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n      }\n      default:\n        return onKeyDownScroll(event);\n    }\n  }\n\n\n  // Make internal state and methods as publicly accessible via ref.\n  useImperativeHandle(ref, () => ({\n    search, \n    handleKeyDownScroll, \n    emojis: pickerState.searchEmojis.emojis || emojiData, \n    focusedEmoji: pickerState.focusedEmoji?.emoji,\n  }) as EmojiPickerRef)\n\n  const ScrollProps = {\n    emojiData: pickerState.searchEmojis.emojis || emojiData,\n    emojisPerRow: emojisPerRow!,\n    emojiSize,\n    numberScrollRows,\n    focusedEmoji: pickerState.focusedEmoji,\n    refVirtualList,\n    handleClickInScroll,\n    handleMouseInScroll,\n    collapseHeightOnSearch,\n    itemCount, \n    itemRanges,\n  }\n\n\n  // Define event handler for select in navbar element.\n  const handleSelectInNavbar = (category: string) => {\n    let virtualList = refVirtualList.current;\n    if (virtualList) {\n      let range: itemRange | undefined = itemRanges.find(range => range.key === category)\n      if (range) {\n        setPickerState({focusedEmoji: {row: range.from + 1, emoji: emojiData[category][0], focusOnRender: false, preventScroll: false}})\n        virtualList.scrollToItem(range.from, \"start\");\n      }\n    }\n  }\n\n\n  // Compute width on window resize.\n  const [width, setWidth] = useState(() => `calc(${emojiSize}px * ${emojisPerRow} + 1em + ${measureScrollbar()}px)`);\n  useLayoutEffect(() => {\n    let resizeWidth = () => setWidth(`calc(${emojiSize}px * ${emojisPerRow} + 1em + ${measureScrollbar()}px)`);\n    window.addEventListener(\"resize\", resizeWidth);\n    return () => window.removeEventListener(\"resize\", resizeWidth);\n  }, [])\n\n\n  return (\n    <div className={ `emoji-picker emoji-picker-${theme}` } style={{ width }}>\n      { showNavbar && \n        <Navbar data={emojiData} handleSelectInNavbar={handleSelectInNavbar}/> \n      }\n      <div className=\"emoji-picker-scroll\" role=\"grid\" aria-rowcount={itemCount} aria-colcount={emojisPerRow} onKeyDown={handleKeyDownScroll} ref={refScroll}>\n        { pickerState.searchEmojis.emojis\n          ? Object.values(pickerState.searchEmojis.emojis).flat().length\n            ? <Scroll {...ScrollProps}/>\n            : <div className=\"emoji-picker-category\" style={{height: collapseHeightOnSearch ? 'inherit' : '432px'}}>\n                <div className=\"emoji-picker-category-title\">No results</div>\n              </div>\n          : showScroll && \n              <Scroll {...ScrollProps}/>\n        }\n      </div>\n      { showFooter && \n        <Footer emoji={pickerState.focusedEmoji?.emoji} emojiPreviewName={emojiPreviewName}/> \n      }\n    </div>\n  )\n}\n\nexport const EmojiPicker = forwardRef(EmojiPickerRefComponent);","import React, { useRef, useCallback, useState, ChangeEvent, KeyboardEvent } from 'react';\nimport ReactDOM from 'react-dom';\nimport type { EmojiObject } from '../src/index';\nimport { EmojiPicker, EmojiPickerRef, unifiedToNative, throttleIdleTask } from '../src/index';\nimport EmojiData from \"../data/twemoji.json\"\nimport './index.css';\n\nimport \"../src/EmojiPicker.css\"\nimport \"../src/Emoji.css\"\n\nconst copyToClipboard = async (string: string) => {\n  try {\n    // Try to use the Async Clipboard API with fallback to the legacy approach.\n    // @ts-ignore\n    const {state} = await navigator.permissions.query({name: 'clipboard-write'});\n    if (state !== 'granted') { throw new Error('Clipboard permission not granted'); }\n    await navigator.clipboard.writeText(string);\n  } catch {\n    const textArea = document.createElement('textarea');\n    textArea.value = string;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n};\n\nfunction ExampleSetup() {\n\n  const picker = useRef<EmojiPickerRef>()\n  const input = useRef<HTMLInputElement>()\n\n  // need reference to same function to throttle\n  const throttledQuery = useCallback(throttleIdleTask((query: string) => picker.current?.search(query)), [picker.current]);\n\n  const inputProps = {\n    ref: input,\n    placeholder: \"search-or-navigate\",\n    onChange: (event: ChangeEvent<HTMLElement>) => throttledQuery((event.target as HTMLInputElement).value.toLowerCase()),\n    onKeyDown: (event: KeyboardEvent<HTMLElement>) => { \n      if (![\"Enter\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\"].includes(event.key)) return;\n      picker.current.handleKeyDownScroll(event); \n      if (event.key == \"Enter\" && !event.shiftKey) {\n        picker.current.search(\"\");\n        input.current.value = \"\";\n      }\n    },\n  }\n\n  const onEmojiSelect = (emoji: EmojiObject) => {\n    const nativeEmoji = unifiedToNative(emoji.unicode);\n    copyToClipboard(nativeEmoji);\n    notification.show(`Copied ${nativeEmoji} to clipboard`);\n    console.log(emoji);\n  }\n  \n  const emojiPickerProps = { \n    ref: picker, \n    emojiData: EmojiData, \n    onEmojiSelect, \n    showNavbar: true, \n    showFooter: true,\n    collapseHeightOnSearch: false,\n  }\n\n  /**\n   * Adaptation of show-and-hide popup from https://rsms.me/inter/#charset for React hooks.\n   * Ignore this if you're just using this website as an example of how to setup the emoji picker.\n   */\n  const [notification] = useState(() => {\n\n    let timer = null\n    let visible =  false\n\n    const show = (message) => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      el.firstChild.innerText = message\n      el.classList.add('visible')\n      if (visible) {\n        hide()\n        setTimeout(() => show(message), 120)\n        return\n      }\n      visible = true\n      el.style.visibility = null\n      clearTimeout(timer)\n      timer = setTimeout(() => hide(), 1200)\n    }\n\n    const hide = () => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      if (visible) {\n        el.classList.remove('visible')\n        visible = false\n        el.style.visibility = 'hidden'\n      }\n    }\n  \n    return { show }\n  })\n\n  return (\n    <div style={{'display': 'flex', 'flexDirection': 'column', 'minHeight': '100vh', 'justifyContent': 'center', 'alignItems': 'center'}}>\n      <h1>Emoji Picker</h1>\n      <p>A virtualized <a href=\"https://twemoji.twitter.com/\">twemoji</a> picker written in React and TypeScript.</p>\n      <EmojiPicker {...emojiPickerProps}/>\n      <input {...inputProps}/>\n      <a href=\"https://github.com/BrianHung/EmojiPicker\">source code →</a>\n      <div id=\"notification\">\n        <div></div>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<ExampleSetup/>, document.getElementById('example-setup'));"],"names":["unified","codePoints","split","map","parseInt","u","String","fromCodePoint","apply","document","div","createElement","style","cssText","body","appendChild","scrollbarWidth","offsetWidth","clientWidth","removeChild","prev","next","attribute","modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","createObjectURL","[object Object]","Error","head","p","Emoji","_a","emoji","className","props","__assign","data-unicode","unicode","alt","unifiedToNative","draggable","aria-label","name","MemoizedNavbar","memo","_b","data","handleSelectInNavbar","index2","setIndex","useState","onNavbarKeyDown","event","key","keys","index22","length","onNavbarClick","category","role","entries","list","i","props2","onClick","onKeyDown","aria-selected","tabIndex","ref","button","activeElement","closest","focus","MemoizedFooter","_c","emojiPreviewName","fontSize","MemoizedScroll","emojisPerRow","emojiSize","numberScrollRows","focusedEmoji","emojiData","refVirtualList","handleClickInScroll","handleMouseInScroll","itemCount","itemRanges","collapseHeightOnSearch","arrayOfRows","setArrayOfRows","infiniteLoaderRef","useRef","prevFocusedEmoji","current","resetloadMoreItemsCache","scrollToItem","Math","min","to","prevEmoji","nextEmoji","rowsToUpdate","Set","row","from","forEach","loadMoreItems","startIndex","endIndex","nextArrayOfRows","range","find","range2","rowIndex","aria-rowindex","aria-colindex","offset","slice","colIndex","liProps","onMouseMove","li","focusOnRender","preventScroll","emojiProps","InfiniteLoader","isItemLoaded","minimumBatchSize","threshold","onItemsRendered","VirtualList","itemData","itemSize","height","innerElementType","MemoizedRow","prevProps","nextProps","index","prevStyle","prevData","prevIndex","prevRest","nextStyle","nextData","nextIndex","nextRest","shallowDiffer","forwardRef","_d","parseFloat","EmojiPicker","onEmojiSelect","console","log","showNavbar","showFooter","showScroll","onKeyDownScroll","collapseCategoriesOnSearch","theme","pickerStateReducer","useCallback","prevState","nextState","searchEmojis","emojis","query","Boolean","EmojiPickerReducer","pickerState","setPickerState","useReducer","values","flat","useMemo","perRow","array","ceil","push","calcCountAndRange","search","results","score","keywords","word","indexOf","reduce","a","b","Number","filter","sort","Search Results","grouped","includes","sum","refScroll","handleKeyDownScroll","preventDefault","emojis2","pop","arrayIndex","arrayEmoji","emojiIndex","findIndex","emoji2","arrayAbove","floor","arrayBelow","newIndex","ScrollProps","movementX","movementY","isSafari","window","safari","width","setWidth","measureScrollbar","resizeWidth","addEventListener","removeEventListener","Navbar","virtualList","aria-rowcount","aria-colcount","Scroll","Footer","picker","input","throttledQuery","callback","idleHandler","requestIdleCallback","setTimeout","argsFunc","running","args","throttleIdleTask","inputProps","placeholder","onChange","target","value","toLowerCase","shiftKey","emojiPickerProps","EmojiData","nativeEmoji","async","string","state","navigator","permissions","clipboard","writeText","e","textArea","select","execCommand","show","notification","timer","visible","message","el","querySelector","firstChild","innerText","classList","add","visibility","hide","display","flexDirection","minHeight","justifyContent","alignItems","href","id","ReactDOM","render","ExampleSetup","getElementById"],"mappings":"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"}